数据库设计：
	数据库设计中的一些术语：
		1.实体：任何一个对象,表中的一行。
		2.实体集：对象的集合,一张表。
		3.属性：指实体的某个属性,即表的列。
		4.联系(关系)：实体与实体间的关系(主外键关系)
		5.联系集(关系集)：多个实体间的关系的集合,同类联系的集合。(存储关系的表,联想QQ好友关系表)
		6.E-R图(实体-关系图)：用来描述表间关系的图。(用画图的方式来表现表与表之间的关系)
		7.映射基数：一个实体通过联系集能同时与多个其他实体关联。假设有实体集A和实体集B
			一对一：A中的一个实体最多能与B中的一个实体对应,反之一样
			一对多：A中的一个实体能与B中的任意多个实体对应,B中的一个实体则能和A中的任意多个实体对应
			多对多：A中的一个实体能与B中的任意一个实体对应,反之一样
		8.码(主键,属性集)：唯一标示一个实体
		
		
把一个表的update权限给另一个账户：首先这个账户必须具备修改这个表的权限
	grant update on 表名 to 用户名
		
在指定架构下创建表
	create table 架构名.表名
	(
		列名 类型.......
	)
		
数据库优化：
	通过文件组	可以把数据库的表放到不同的磁盘上去,达到并行使用多个磁盘的io资源,提高读写效率

		
视图：
	把一个查询结果作为虚拟表 提供给开发人员使用
	语法：
		create View VW_视图名称 as  select * from 表
	使用视图的优点和缺点
		安全性高。视图只能查询,不能修改数据,它是一张虚拟表
		查询方便,逻辑清晰
		视图性能低	(一般情况下,不如自己写SQL快)
	
	
临时表：
	本地临时表:
		本地临时表的创建：
			和普通表的创建方法是一样的,只是在表名的前面添加一个 #  就代表这个本地表示临时表
		会话结束的时候,临时表就被释放了
		临时表在服务器重启或者数据库断开连接的时候就会消失
		临时表的使用和普通表示一样的
		临时表用完之后一定要释放掉,也就是删除掉  drop table 临时表名字
		一般临时表的使用：
			select * into #临时表名称 from 一个表名
	
	全局临时表:   --尽量不要使用,即使使用也得drop释放
		全局临时表的创建：
			创建方法好本地临时表是一样的,只是在表名前面添加 两个#  代表这个是全局临时表
		全局临时表：所有的用户的会话都可以访问到。
		全局临时表会在所有用户都断开会话后,会自动释放
			
			
	本地临时表仅在当前会话中可见：全局临时表在所有会话中都可见
	
	
		
数据库 锁的概念：
	X：排它锁    S：共享锁
	当我们执行 update、insert、delete 操作的时候会在表上加上一个 X锁 
		也就是说这个时候别的用户是不能执行这些操作的,当然排它锁只能在没有其它排它锁的时候添加、
	当我们执行 select查询的时候会在表上添加一个共享锁
		添加上了共享锁只有,别的用户也可以进行查询
	一个查询中关联了多个表的时候,会在每个表上添加一个共享锁,这个时候很容易出现死锁
	SQL语句 witch(nolock)  --不对该SQL语句添加锁
	

异常处理：
	begin try
		SQL脚本
	end try
	begin catch
		如果有异常则执行catch里面的,没有的话则执行 end catch后面的
	end catch