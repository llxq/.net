-> 调试：
	-> 在浏览器中调试
		-> 点击切换到sources界面,点击你要调试的文件,中间会显示你的源代码,直接在左边点击即可加上断点
		   如果想要查看某个值,直接右键然后点击 Add to watch 结果会显示在右边,或者直接鼠标悬浮上面也
		   可以查看结果
		   -> 还有一种办法,我们直接复制这个变量,放置在Console界面中,直接回车也可以查看值
		-> 如果直接点击右边的 》则表示直接运行了 快捷点为F8 如果想要进行下一步,点击边上的那个符号或
		   者快捷键 F10  进入内部为 F11  从内部出来shift+F11
		-> F8是直接执行到断点处,如果去掉断点则直接执行完成,而F10则是执行下一步
	
-> document.write();  //输出语句,相当于是输出文本到网页中


-> elements：当前页面上的一些元素,这里面看到的是js执行的结果
-> sources：源代码,相调试就通过他


-> 方法：
	-> 定义方法
		-> 语法：
			-> function 方法名(参数列表){方法体}
			-> 参数不需要写类型,直接写参数名称即可,多个参数间用逗号隔开
		-> 方法名首字母小写
		-> 如果需要返回值,则在方法体中使用return关键字
		-> 调用：方法名(参数);
		-> 如果有返回值,可以直接使用,如果没有返回值却使用,则返回undefined
		-> 没有方法重载,后定义的方法会将先定义的方法覆盖
			-> 不支持方法重载,只要方法名一样,就会把原先的覆盖
		-> 可以使用关键字 arguments 获取所有的参数,是一个数组
			-> 实例
				function sum(){
					// arguments.length   可以获得调用的时候传入的参数的个数
					var sum=0;
					for(var i=0;i<arguments.length;i++){
						sum+=arguments[i];
					}
					alert(sum);  //这个就是输出当前输入的参数的和
				}
				sum(1,2,3,4,这里可以随便写多少个参数);
			-> 如果想要明确希望向一个方法中传递参数的话,就给定形参即可
			
-> 匿名函数：(前提是只用一次) 
	-> 不需要定义方法名,直接写参数列表与方法体
	-> 方法一：
		-> function(参数){方法体}
			-> 可以将方法赋值给一个变量,这个变量表示一个方法
		->典型应用：为事件绑定处理函数,传递回调函数
	-> 方法二：
		-> (function(n1,n2){方法体})(1,2))
			-> 定义的同时完成调用
	-> 方法三：
		-> new Function("n1","n2","return n1+n2")  new 一个Function对象
			-> 赋值给一个变量完成调用
	-> 最常用的方式：方式一
	
-> 闭包：
	-> 参照备注代码
		-> function Show(name){
			return function(){
				alert(name);
			}
		}
		var f1=show('a');
		调用：f1();
	-> 问：在子函数中并没有声明name变量,但是却可以用,为什么呢?
	-> 答：当需要使用name时,会向前找,发现整个函数中没有声明,则向上一级找,进入了函数F1中,这里有个参
			数name,则使用这个变量的值
	-> 作用域链：即使方法f1运行完成了,name依然在子函数中被使用,不会被释放,这形成了变量的作用域链
	-> 建议：先声明在使用,尽量不要使用闭包,因为会让变量在内存中长期存在,无法释放

-> 模拟面向对象：
	-> 定义：function 类名称(){...}
	-> 看上去与方法语法类似,区别是类名称的首字母大写
	-> 获取对象：new 对象名();
	-> 访问：对象.成员
	
-> 原型：
	-> 原型：对象的类型
	-> 访问原型：
	//不可用-> p1._proto_.属性名字=值;		//为原型注册一个属性,这样可以为Preson添加了一个属性
		-> 也可以这样写：
			-> Preson.prototype.属性名字=值;
	-> 为原型注册方法：
		Preson.prototype.方法名=function(){方法体}
	-> 当我们添加重名的属性或者方法的时候：
		-> 默认调用的是函数对象本身的属性或者方法
		-> 通过原型增加的属性和方法的确是存在的
		-> 函数对象本身的属性或方法的优先级要高于原型的属性或方法

-> 集合：
	-> 数组：[.....]
	-> 键值对：{键:值,.....}
		-> 通过键来访问：
			键值对名称["键名称"];
		-> 也可以把它看做是一个json对象,直接通过属性访问值
			键值对名称.键名称
		-> 这也可以看成是对象,键就是属性,值就是属性值
		-> Json：JavaScript Object Notation (标记)   //JavaScript对象标记,就是一种对象的简写形式
			可以理解为匿名类型对象,不需要类型直接得到对象
	-> 对象数组：[{属性:值,...},{},{}]
	
-> disable：该属性可以设置是否禁用,true为禁用