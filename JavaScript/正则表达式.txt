-> 这个正则表达式是 js 的功能,与 jsdom没关系！！！

-> 元字符：
	-> \ ：表示转义字符
	-> . ：表示一个任意字符
	-> *+？：表示字符个数
		-> * ：零到多个
		-> + ：1到多个
		-> ？：表示0个或1个
	-> {n,m} ：表示字符个数
		-> 最少n个,最多m个
		-> 另外两种格式：
			-> [n] ：表示固定就n个
			-> [n,] ：表示比n个多
	-> ^$ ：表示开始与结束
		-> ^ ：开始
		-> $ ：结束
	-> [^] ：表示非
		-> [a-z] ：表示a到z中的其中一个,可以填数字也行,大写字母也行
	-> \d ：表示1个数字
	-> \w ：表示1个字符(不包含中文)
	-> \s ：表示一个空白字符
	-> () ：表示优先级,提取组
	-> | ：表示或
	
-> 正则的作用：对字符串进行处理的简单方式 (匹配,提取,替换)

-> 构造对象的方法：
	-> 方式一：var regObj=new RegExp('\\d{5}');
	-> 方式二：var regObj=/\d/;   (写在/ / 里面)
	-> 推荐使用第二种方式,这种方式是js中专为正则表达式提供的语法,不需要考虑转义字符的影响
	
-> 方法：
	-> 正则对象.test(string)：检索字符串中的指定值,返回是true或false,功能同C#中的IsMatch
	-> 正则对象.exec(string)：检索字符串中的指定值,返回是被找到的值,如果没有发现匹配,则返回null,功
	   能同C#中的Match(取第一个匹配到的项)   这个方法只能匹配第一个匹配的值
	-> 全局模式g：在正则表达式末尾加上个g,结合循环遍历所有匹配的项,功能同C#的Mathes(取所有匹配项)
		这个方法可以获取所有匹配的值  全局模式必须结合循环while使用,要不然还是只能提取一个
	-> 组：如果划分为组的话,想要获取组的内容,因为提取到的字符是一个字符数组,所以我们可以直接通过索
		   引来直接得到   0代表提取到的所有字符,从1开始的才是组里面的数据
	
	-> 正则表达式没有替换功能,可以把正则对象作为参数传递
		-> 字符串对象.replace(正则对象,替换字符串)：实现替换功能,如果想要替换多个,需要使用全局模式