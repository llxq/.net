正则表达式：(Regular Expression)的主要类：Regex
常用的3种情况：(C#语法)
	1.判断是否匹配：Regex.IsMatch("字符串","正则表达式")
	2.字符串的提取：Regex.Match("字符串","要提取的字符串的正则表达式")  //只能提取一次
	3.字符串的提取(循环提取所有)：Regex.Matches(),  (可以提取所有匹配的字符串)
	4.字符串的替换：Regex.Replace("原字符串","正则表达式","替换的内容")
	
	
正则表达式的贪婪模式：(当提取多个超链接的时候)
	"1111.11.111.1"
		贪婪：.+   (默认为贪婪模式，尽可能的多匹配)
		非贪婪：.+？  (尽可能的少匹配 (1个))
		
.+  的匹配默认是贪婪(greedy)的：尽可能的多匹配，直到 "再贪婪一点儿" 其后面的匹配模式就没法匹配为止
.+？ 的匹配就变成了非贪婪模式 (?的另外一个用途)：让其后的匹配模式尽早的匹配



正则表达式入门：(元字符)
	--->要想学会正则表达式,理解元字符是一个必须攻克的难关
	. ：匹配除\n之外的任何单个字符。例如正则表达式"b.g"能匹配如下字符串："big","bug","b g",但是不
		匹配："buug","b..g"
		
	[] ：匹配括号中的任何一个字符。例如正则表达式"b[aui]g"能匹配bug,big,和bag,但不能匹配beg，baug.
		 可以在括号中使用连字符"-"来指定字符的区间来简化表示。例如正则表达式[0-9]可以匹配任何数字
		 这样正则表达式"a[0-9]c"等价于"a[0123456789]c"可以匹配"a0c","a1c"等字符，还可以制定多个区
		 间，例如"[A-Za-z]"可以匹配任何大小写字母，"[a-zA-Z0-9]"可以匹配任何大小写字母或者数字
	
	|  ：将两个匹配条件进行逻辑"或"运算。'z|found'能匹配"z"或"found"。'(z|f)ood'则能匹配"zood"或者
		 "food"。 //注意^$问题
		 
	() : 将 () 之间括起来的表达式定义为"组"(group),并且将匹配这个表达式的字符保存到一个临时区域。
		 这个元字符在字符串提取的时候非常有用。把一些字符表示为一个整体，改变优先级，定义提取组两
		 个作用
		 
	*  ：匹配0至多个在他之前的子表达式，和通配符*没关系。例如正则表达式"zo*"(等同于z(o)*)能匹配"z"
		 "zo",以及"zoo" 因此".*"意味着能够匹配任意字符串。"z(b|c)*"→zb,zbc,zccc,zbbbccc。"z(ab)*"
		 能够匹配 z,zab,zabab(用括号改变优先级)
		 
	+  ：匹配前面的子表达式一次或者多次，和*(0到多次)对比。例如正则表达式"zo"能匹配"zoo"但是不能匹
		 配"z"。
		 
	？ ：匹配前面的子表达式零次或者一次。例如，"do(es)?"能够匹配 "do"或者"does",一般用来匹配"可选"
		 部分。(终止贪婪模式)
		 
	{n}: 匹配确定n次。例如"zo{2}"→zoo。例如"e{2}"不能匹配"bed"中的"e"，但是能匹配"seed"中的两个"e"
		 //seeed 不可以
		 
	{n,}：至少匹配n次。例如"e{2,}"不能匹配"bed"中的"e",但能匹配"seeeeed"中的所有"e"
	
	{n,m}：最少匹配n次且最多匹配m次。"e{1,3}"将匹配"seeeeeeed"中的前三个"e"
	
	限定符：限定前面的正则表达式出现的次数
	
	^	：匹配一行的开始。例如正则表达式"^regex"能够匹配字符串"regex我会用"的开始，但是不能匹配"我
		  会用regex
		^ 另外一种意思：非([^0-9])
		
	$	：匹配一行的结束。例如正则表达式"浮云$"能够匹配字符串"一切都是浮云"的末尾，但是不能匹配"浮
		  云呀"
		  
	^abc ：匹配一个正则表达式的开始  abcjfgjeqowje妈耶
	
	888$ ：匹配一个正则表达式的结束  weqweqwe妈耶888


简写表达式:
	-->注意这些简写表达式是不需要考虑转义符的，这里的\就表示字符\，而不是C#字符串级别的\，在C#代码
	   中需要使用@或者\\双重转义，区分C#级别的转义和正则表达式级别的转义，恰好C#的转义符和正则表达
	   式的转义符都是 \ 而已。正则表达式的转义是在C#之后的(层层盘剥)。把C#的转义符想成%就明白了。
	   
	1. \d ：代表一个数字，等同于[0-9]
	2. \D ：代表非数字，等同于[^0-9]
	3. \s ：代表换行符，Tab制表符等空白字符 (空格，回车，制表符)
	4. \S ：代表非空白字符
	5. \w ：匹配字母或数字或下划线或汉字，既能组成单词的字符，除%$#@!等字符[a-zA-Z0-9_汉字]
	6. \W ：非\w，等同于[^\w]%
		d ：digital;
		s ：space；
		w ：Word；
		大写就是非
		
		
