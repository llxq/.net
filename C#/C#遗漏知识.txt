1.我们可以把string类型看做是char类型的自读数组，既可以通过下标来访问string类型中的某一个元素

comBox的三个属性：
	1.DataSource：绑定数据源   如果绑定了数据源,就不能使用items.add添加数据了
	2.DisplayMember="要显示的值的名称"：设置下拉框中显示的值
	3.ValueMember="实际的值的名称" ：设置实际的值,也就是显示的值代表的实际上是这个设置的值
	4.selectvalue="显示的值" ：这个可以拿到所显示的值的实际的值
	
readonly：只读      public static  readonly  string=""     //这个就是一个自读的静态字符串
--------------------------------------------------------------------------------------------------------------------

2.当我们想要修改某一个字符串的某一个元素的时候，则可以把这个string变量转换为字符串中的某一个元素，则可以把这个string变量类型转换为char类型的数组，比如现在有个字符串变量S
char[] sh=S.ToArrary    然后ch[0]=某个值   则是修改这个string变量的第一个元素

--------------------------------------------------------------------------------------------------------------------

3.当我们想要重新赋值给string变量的时候 则
S=New String(ch);
string ss="";
string  S=ss.Replace('需要修改的的值','需要修改为的值');

--------------------------------------------------------------------------------------------------------------------

4.分割字符串  其实就是删除不必要的字符  
string S="";
char[] C={里面填写需要删除的字符 };
//这样删除的是这里面的值  但是还是占内存  在删除的地方都给他赋值了空值
string[] Str=S.Split(C);
//也可以这样写
string[] Str=S.Split(New Char[需要删除的个数]{需要删除的字符})
//如何把赋值给他的空值也删除  （就是说删除之后重新赋值的空值）
string[] Str=S.Split(C,stringSplitOptions.ReomveEmptyEntries)

--------------------------------------------------------------------------------------------------------------------

5.让两个数不区分大小写比较大小 
string S1="abc";
string S2="ABC";
//这个就是判断两个字符是否相等的   并且是不管大小写
S1.Equals(S2,StringComparison.OrdinaLIgonreCase) //一般放在if中

--------------------------------------------------------------------------------------------------------------------

6.stringBuilder 类  
1)，因为我们在使用string的时候没一次的赋值都会开辟内存  在栈和堆中都开辟空间，这样的话如果你需要大量赋值的话就会很耗时间
2)，这个时候我们可以考虑使用stringBuilder类
3)，声明格式
stringBuilder  SB =New stringBuilder("里面填写你需要的字符");
4)，stringBuilder的各个方法

Append：追加对应的字符，直接在语句的后面添加
SB.Append("里面填写你所需要添加的字符");

Insert：在对应的位置插入指定的字符串  
SB.Insert(插入字符串的位置(索引值位置)，"需要添加的字符");

Remove：删除从索引位置开始的字符
SB.Remove(删除的索引值，长度);

Replace：替换指定位置的字符
SB.Replace("需要替换的字符"，"替换为成的字符");

AppenFromat：添加字符串（字符串！)
先定义一个你说需要添加的字符串
当然也可以填写数字  int
SB.AppendFromat("需要添加的字符串"); 
Sb.AppendFromat("需要添加的数字{0}"，添加的数字);

--------------------------------------------------------------------------------------------------------------------

7.创建一个计时器  用来记录程序运行的时间
-------在使用这个方法时  应该引入命名空间
using System.Diagnostics;
Stopwatch  sw=New Stopwatch();
//开始计时
sw.Start();
//结束计时
sw.Stop();
//输出运行的总时间
//Elapsed  过去的时间
Console.WriteLine(sw.Elapsed);

--------------------------------------------------------------------------------------------------------------------

8.分隔字符  split  是以两个分割字符的中间  形成一个新的字符

--------------------------------------------------------------------------------------------------------------------

9.读取TXT文档的内容，用数组接收
//首先应该引入命名空间  
//using System.Io
string counstr="定义的路径";
string[] str=File.ReadAllLines(counstr，Encoding.Default)
//Encoding.Default  这个玩意是处理乱码的！！！

--------------------------------------------------------------------------------------------------------------------

10.字符串的各个方法（忘记了的！）
1)，Startwith()：判断以........开头的  大小写都可以！！
2)，Endwith()：判断是以.......结尾的  这个大小写也行！
3)，Contains()：判断某个字符串是否包含指定的字符串  不区分大小写！！！
4)，string.IsNullOrEmpty()：判断一个字符是否为空值或者Null
5)，string.Join()：将数组按照指定的字符串连接，返回一个字符串！

--------------------------------------------------------------------------------------------------------------------

11.out参数和ref参数
当需要返回多个值的时候可以选择使用out，out在使用之前即在方法体中必须为其初始化
而ref参数则不需要为其初始化，而使用ref之后则可以改变原来变量中的值

--------------------------------------------------------------------------------------------------------------------

12.C# 的访问修饰符：
1)，public：公开的，公共的
2)，private：私有的，只能在当前类中访问
3)，protected：受保护的，只能在当前类的以及该类的子类内部访问
4)，internal：只能在当前项目中访问，在同一个项目中，internal和public的访问权限是一样的（类的默认修饰符就是internal）
5)，protected internal：
















