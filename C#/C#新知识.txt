ListBox的两个属性：  (绑定数据源之后)
	1.DisplayMember=""  ：这个设置为显示的值
	2.ValueMember=""   	：这个值代表当前的值实际为这个值   (可以理解为上面那个是代号,下面这个为真正的名字)
	3.SelectValue   ：这个就是获取当前选中的实际的值
	
1，里氏转换：
1)，子类可以赋值给父类：如果有一个地方需要一个父类作为参数，我们可以给一个子类代替
//比如说这里有两个类   一个person为父类   一个student为子类	
person p=New student    //这个就是将子类的值赋给父类

2)，如果父类中装的是子类的对象，那么我们可以将这个父类强制转换为子类
//还是上面的这两个类
student ss =(student)p     //这个时候我们就可以用这个父类去调用子类中的方法了	

----------------------------------------------------------------------------------------------------------------------

2，子类对象可以调用父类中的成员，但是父类不可以调用子类中的成员！！

----------------------------------------------------------------------------------------------------------------------

3，一般强制转换父类的时候容易报错，这个时候我们就用到两个方法
1)，is：都是类型转换              //如果转换成功的话则返回一个true，否则返回一个false
//用法：一般是用在if中  if(P is  student)   这句话的意思就是说   如果P是student类   是则返回一个true  否则false

2)，as：都是类型转换          //如果转换成功的话则返回对象，否则返回null
//用法  stuent t=p as studet();    成功则返回该对象，失败则是null

----------------------------------------------------------------------------------------------------------------------

4，Hashtable  (键值对集合)----------这是一个实例(非静态)类！！！！！！！
1)，Hashtable 的删除和增加大致和ArrayList相同   //但是在键值对集合中  我们是根据键去查找，删除，添加 值得
******** 在键值对集合中   键是唯一的，但是值是可以重复的  -----------也就是说不同的键中  可以存放相同的值
2)，声明格式
using System.Collectoins;
Hashtable  ht=New  Hashtable();
//添加方法 有两种
ht.Add(键，值);    //而这个则不可以
ht[键]=值     //这个方法可以强行更改已经有的值了 就是可以重新给他赋值
3)，键的集合：ht.Keys    //可以查找出集合中所有键的值
4)，ht.Keys.Values     //当前键的值
5)，键值对集合常用的方法
ht.CountainsKey(键值) --------------这个一般放在if中判断当前集合中该键是否存在
ht.Clear()  ---------------------清楚集合中所有的元素
ht.Remove(键)-----------------删除指定键所在的值

----------------------------------------------------------------------------------------------------------------------

5，path类！！！！！（操作路径的）---------这是个静态类  不需要创建对象
1)，使用的时候应该引入命名空间     using System.Io;
2)，path类的常用方法
//括号里面填写的都是路径
path.GetFileName()  :   获得文件名，包括扩展名
--
path.GetFileNameWithoutExtension()：   获得文件名字  但是不包含扩展名！ without：没有 ，Extension：扩展名
--
path.Extension()：   获得文件的扩展名
--
path.DirectoryName()：   获得文件所在的文件夹的名字    其实就是除文件名和扩展名之外的文件夹的名字
--
path.FullPath()：   获得文件的全路径   Full： 全部
--
path.Combine(路径1，路径2)： 这个是将两个路径连接起来   combine：组合，连接

----------------------------------------------------------------------------------------------------------------------

6，File类 -------静态类，操作文档类----------只能读取小文件  
绝对路径和相对路径
-----
绝对路径：通过给定的这个路径直接能在我的电脑中找到这个文件
-----
相对路径：文件相对于应用程序的路径--------------把需要执行的文件放在可执行文件同一目录下！
********在我们开发中，应该尽量的去使用相对路径
1)，基本的方法
File.Create(路径)：创建一个新的文档
File.Delete(路径)：删除一个文档   不可回收！！！
FIle.Copy(路径，新的文件路径 )：复制一个文档，相当于是新建一个，里面存放以前的那个路径里面的内容
FIle.Exists(路径)：确定一个文件是否存在
File.Open(路径，Filemode.Open)：打开
File.ReadAllLines(路径，Encoding.Default)：返回一个数组 ，就是读取一个字符串数组  Encoding.Default ：使用系统默认的编码，其实就是处理乱码
File.ReadAllText(路径，Encoding.Default)：阅读全文
File.WriteAllLines(路径，string数组)：将一串字符串数组写入到一个文本文件，会覆盖源文件
File.WriteAllText(路径，"直接添加文本即可")：添加的是字符串  覆盖
File.AddAllText(路径，string数组)： 将一串字符串写入到文本文件，不会覆盖
File.AddAllLines(路径，"直接添加文本即可")：将一串字符串数组写入到文本文件中，不会覆盖

2)，Endcoding.Default.GetBytes(字符串)：字符串----字节数组
3)，Endcoding.Default.GetString(字节数组)：字节数组-----字符串
4)，移动文档
File.Move(路径1，路径2);----将路径1移动到路径2
--------
转换为字节数组
Endcoding.Default.GetBytes(字符串)------括号里面填写的是一个字符串  
File.WriteAllByte(路径，字节数组)-----------在这个路径中如果存在这个文件，则覆盖，没有的话则添加一个   这个就是添加文档  返回的是一个数组 
如果转换不成功的话 则：
Encoding.Default("GB2312").Getstring; -----Geb2312也可以转换为GBK
--------
ReadAllBytes(路径)--------读取文档  读取路径里面的所有文档，返回的是一个byte 数组
Endcoding.Default.Getstring(字节数组)   将这个路径中的文档返回的字节数组  转换为string

----------------------------------------------------------------------------------------------------------------------

7，List泛型集合
1)，属于 ： using.System.Collections.Generic;
2)，声明格式
List<类型>  list = New  List<类型>();
******泛型集合和ArrayList用法大致一样
3)，list泛型集合可以转换为数组  (泛型是什么类型就是转换为什么类型数组)！！！！！！
比如说有一个 int类型的list泛型集合 
int[] nums=list.ToArray();
4)，将数组转换为list泛型集合
List<类型> list=nums.ToList();

----------------------------------------------------------------------------------------------------------------------

8，装箱和拆箱
装箱：就是将值类型转换为引用类型
拆箱：就是将引用类型转换为值类型
*****看两种类型是否发生了装箱和拆箱，需要看这两个类型是否存在继承关系
在我们开发过程中应该尽量少使用装箱和拆箱  ！！！！

----------------------------------------------------------------------------------------------------------------------

9，Dictionary (字典集合)
1)，属于： using.System.Collections.Generic;
2)，声明格式：
Dictionary<键的类型，值的类型>  dc=new Dictionary<键的类型，值的类型>();
3)，Dictionary集合和Hashtable集合用法相似
4)，Dictionary集合键的遍历方式
foreach(KeyValuePair<键类型，值类型>  outdc  in  dc);
需要键值：outdc.Key
需要值：outdc.Value 
判断键是否存在：outdc.ContainsKey(键) 

----------------------------------------------------------------------------------------------------------------------
FileStream和StreamReader的区别：
	前者是操纵字节的,后面的是操纵字符的, 当需要操作文本文件的时候,可以使用StreamReader

10，Filestream  (文件流！)    属于非静态类
Filestream.Append：追加字节！！！！！
1)，Filestream适合读取大文件，对内存压力小   而Fill只适合读取小的文件
2)，Filestream：操作字节的
  ， Streamread 和 streamwrite 操作字符串的
3)，Filestream 读写文件
引入命名空间：using.System.Io;
------
Filestream  filread=new  Filestream(路径，FileMode.Openorcreat，Fileaccess.read)
FileMode.Openorcreat：是个枚举值，用于指定文件的打开方式
Fileaccess.read：对文件数据进行什么操作
------
//定义一个字节数组接收读取的文档
Byte[] b=new byte[里面填写每次读取的大小  以字节为单位];
-----
//读取数据
//因为读取返回的是一个int类型的变量，其实就是返回实际读取的字节数的大小
int r = filread.read(b，0，b.Length)  
第一个参数是：每次读取的数据的大小
第二个参数是：从什么地方开始读取的
第三个参数是：每次读取最多读取的大小
-----
//解码读取
//返回的是一个字符串
string str = Encoding.Default.Getstring(b，0，r);
//如果有的时候返回的是一串乱码  则可以把default修改为其他的
//因为有的时候我们定义了一个存放字节的数组  太大了 系统会默认一空格填充
//这个时候我们可以在解码的时候定义他读取的实际大小
第一个参数是：每次读取的大小
第二个参数是：开始读取的位置
第三个参数是：结尾的位置，其实就是文本的大小
-----
//因为我们使用完文件流之后应该关闭文件流
Filread.Close();
//关闭完文件流之后我们应该释放资源
Filread.Dispose();
-----
//因为我们关闭文件流和释放资源很麻烦  这个时候我们可以使用  using  来帮我们释放所占用的空间
using(里面填写我们创建文件流对象的过程)
{
   里面填写文件流的读取和写入等.
}
-----
//文件流写入数据
Filestream  filewrite = new filestream(路径，FileMode.Openorwrite，FileAccess.Write);
-----
//定义一个字符串接收你输入的文档
string str="输入的文档";
-----
//因为我们写入数据的时候是以字节存储的  所以我们需要将这个字符转换为字节数组
byte[] b = Encoding.Default.Getbyte[str];
//但遇到写入的数据是一串乱码  则可以把编码的格式修改  也就是修改 default  把这个修改为其他的即可
-----
//写入解码
filewrite.write(b,0,b.length);
第一个参数：写入文件的大小
第二个参数：开始写入的地方
第三个参数：写入的长度(大小)
----
StreamReader和StreamWriter
-----
StreamReader sr=new StreamReader(里面填写路径，加上解码)
sr.ReadLine()   : 一行一行输出
如果你想要读取全部的话  就得用一个循环去读
sr.EndofSream    ：这个方法可以判断是否是读取到了文件尾 ，返回一个bool类型
-----
StreamWr的用法一样
sr.Writer(加上一个字符串即可)：这样是覆盖了原先的文本
如果不想他覆盖的话则
StreamWr  sr =new StreamWriter(路径，true)：这样既不会覆盖，直接追加

11，多态
多态就是指在程序运行时，执行的虽然是一个调用方法的语句，却可以根据派生类对象的类型不同完成方法不同的具体实现
-----
多态其实就是对象的不同实现方法
多态的实现方法有三种：
-----
1)虚方法：关键字  virtual  
重写方法：override
override 能够重写基类中的方法	
想要实现派生类中方法  可以定义一个基类数组接收遍历即可
-----
2)，	抽象类：关键字 abstract
抽象类的特点：  （抽象方法是没有方法体的）
1.抽象类成员必须标记为 abstract，且不能有任何的实现
2.抽象成员必须在抽象类中
3.抽象类不能被实例化
4.抽象类中可以添加非抽象成员，并且抽象类中的非抽象类成员可以不被子类实现，但是我们不能再非抽象类中添加抽象成员！！！ 
5.当一个子类继承抽象类之后，必须重写抽象类中的所有抽象成员（除非子类也是一个抽象类，则可不需要重写）
6.抽象成员的访问修饰符不能是 private！！！！！！！！！！！！！！！
7.	抽象类是有构造函数的，虽然不能被实例化 8.如果父类的抽象方法中有参数，那么，继承这个抽象父类的子类方法中也必须传入对应的参数，如果父类的抽象方法中有返回值，那么，子类在重写这个方法的时候也必须要有返回值（简单来说就是子类中重写的方法返回值类型和参数都必须和父类是一样的）
------
如果父类中的方法有默认的实现，并且父类也需要被实例化，这个时候我们而已考虑把父类定义为一个普通类，使用虚方法来实现多态
如果父类中的方法没有默认实现，父类也不需要被实例化，则可以把该类定义为抽象类

--------------------------------------------------------------------------------------------------------------------

12，out参数和ref参数
当需要返回多个值的时候可以选择使用out，out在使用之前即在方法体中必须为其初始化
而ref参数则不需要为其初始化，而使用ref之后则可以改变原来变量中的值
ref参数可以把一个变量以参数的形式带入到方法中进行改变，并且将改变的值带出来
ref参数就是将值传递改为引用传递

--------------------------------------------------------------------------------------------------------------------

13，C# 的访问修饰符：
1)，public：公开的，公共的
2)，private：私有的，只能在当前类中访问
3)，protected：受保护的，只能在当前类的以及该类的子类内部访问（在跨项目时protected的访问权限比internal高，在同一个项目中internal的访问修饰符高与protected）
4)，internal：只能在当前项目中访问，在同一个项目中，internal和public的访问权限是一样的（类的默认访问修饰符是internal）
5)，protected internal：protected+internal的访问权限
能够修饰类的访问修饰符只有两个：public 和 internal
6)，可访问性不一致
*****子类的访问权限不能高于父类的访问权限，因为这样会暴露父类的成员！！！

--------------------------------------------------------------------------------------------------------------------

14，值传递和引用传递
值类型：int，double，decimal，char，enum，stract，bool （值类型是存储在栈中的）
引用类型：string，数组，自定义类，集合，object，接口  （引用类型是存储在堆中的）
-----
值类型在复制的时候，传递的是这个值的本身：改变一个值，其他值不会改变，存储在不同的内存中（但是都在栈中）
引用类型在复制的时候，传递的是这个值的引用：改变一个值，其他值也会改变，这些值都指向一个引用

--------------------------------------------------------------------------------------------------------------------

15，序列化和反序列化
序列化：就是讲对象转换为二进制
反序列化：就是将二进制转换为对象
----
作用：传输数据
-----
想要将一个类转换为可以序列化的类，需要在这个类的上面添加   [SeriaLizable]
BinaryFormatter：序列化对象的一个类
格式：
//开始序列化对象
BinaryFormatter  bf  = new BinaryFormatter();
//将对象转换为二进制
bf.Serialize(第一个参数为一个流，第二个参数就是序列化对象)，在这就是（filestream变量，bf）
-----
将对方发过来的序列化对象进行反序列化
BinaryFomatter  bf = new BinaryFormatter();
bf.Deserialize(传入一个流);
定义一个对象接受传入的流
因为我们这里序列化的是一个类，preson
preosn p;
//将传入的数据强制转换为我们所需要的这个类 这里preson
p=(preson)=bf.Deserialize(传入一个流)；

--------------------------------------------------------------------------------------------------------------------

16，部分类
当我们在同一个命名空间中需要使用相同名字的类的时候我们可以在修饰符的前面加上关键字：Partial
partial：表示部分类
表示加了partial的类都是这个类的一部分  共同组成了这个类
加了partial的类本质上是同一个类，可以访问其中的私有成员

--------------------------------------------------------------------------------------------------------------------

17，密封类
关键字：sealed
密封类不可以被继承，但是可以继承别人

--------------------------------------------------------------------------------------------------------------------

18，ToString()方法的重写
ToString方法是Object类的一个虚方法  可以使用Override重写这个方法

--------------------------------------------------------------------------------------------------------------------

19，接口
关键字：interFace
命名规范：以I开头able结尾
-----
接口就是一个规范，能力
-----
一个类继承了一个接口的话必须要实现他的成员
-----
当你需要多继承的时候，我们可以使用接口，因为类是不允许多继承的
-----
接口中的成员不允许添加访问修饰符，默认就是public
接口中不能含有方法体（也就是说不能有任何实现，都只是光说不做，只是定义了一组未实现的成员）
接口中不能包含字段
接口中可以包含自动属性（属性的话，只能包含自动属性，因为自动属性的方法没有方法体）
接口可以包含的成员：方法，属性，索引器（这三个本质上是方法），不能有字段和构造函数
接口与接口之间可以继承，并且可以多继承
接口并不能去继承一个类，而类可以继承接口（接口只能继承于接口，而类既可以继承接口，也可以继承类）
实现接口的子类必须实现接口的全部成员
接口继承的时候，父类必须在接口前面
	
-----
自动属性和普通属性的区别
自动属性会自动的生成一个字段
总的来说差不多。。。
-----
继承方法之后，必须要实现这个方法  实现的方法不需要使用override，可以添加访问修饰符
为了多态，接口不能实现实例化，也就是说接口不能new一个对象
接口想要实现多态，必须指向一个对象，在调用接口的方法即可
-----
显示实现接口
显示实现接口就是为了解决接口重名问题
现在有一个类(Preson)，一个接口(IFlayable)
里面有两个相同的方法：void  Fly()
这个时候如果preson继承了这个接口那么实现的就是类中的那个fly() 并不是接口中的飞
这个时候我们就需要显示实现接口了，方法如下	
void IFlayable.Fly()   ：这个调用的就是接口中的方法（这个方法前面不允许添加访问修饰符，调用这个方法的时候调用的是父类中的方法）

--------------------------------------------------------------------------------------------------------------------

20，GUID
GUID：可以帮我们产生全时间独一无二的编号（不会重复）
格式：
Guid.NewGui().Tostring();

--------------------------------------------------------------------------------------------------------------------

21，MD5加密
引入命名空间 ： 运用Alt+Shift+F10
定义一个方法来接收输入的字符串并将它加密
返回一个字符串
创建一个MD5对象，调用他的Create（）方法，这是一个静态方法
//开始加密了
//我们需要将接受过来的字符串转换为字节数组
然后
//将转换过来的字节数组加密，返回一个字节数组
加密的时候需要使用到MD5的一个方法
MD5  m =MD5.Create();
byte[] b =m.ComputeHash(填写返回的哪个字节数组)；
最后
//我们需要遍历返回的这个加密字节数组
然后运用Tostring("x")，转换为16进制

--------------------------------------------------------------------------------------------------------------------

22，Directory类（在 using Syste.Io 命名空间下，并且是个静态类）
调用Directory的一个静态方法GetFiles（里面填写需要的路径），返回一个字符串数组
这个方法可以获得指定文件夹的所有文件的全路径
-----
创建文件： Directory.createDirectory(填写路径即可)：这个时候创建的是一个文件夹，并且创建的文件夹不会覆盖
-----
删除文件： Directory.Delete(路径)    ：删除的目录必须是为空的！！（回收站也是清空的）
如果你需要删除的文件夹不是空的，而你就是要删除的话则：Directory.Delete(路径，true)
这样就可以删除这个路径下的文件夹，并且不管这个文件夹下有没有文件
-----
剪切文件夹：Directory.Move（路径1，路径2）
将路径1的文件夹剪切至路径2，并且剪切的内容是这个文件夹里面的所有内容
-----
获得指定文件夹里面的文件全路径，并且筛选出我们需要的文件格式的路径：Directory.GetFile（路径，"*.Jpg"）: 这"*JPg"则代表的是你所需要的文件路径的格式
-----
获取当前目录里面的所有文件夹的全路径：Directory.GetDirectory(路径)：这个是获取指定路径（文件夹）下的所有文件夹的全路径
返回的是一个字符串数组
-----
判断当前路径是否存在：Directory.Exists() ：返回的是一个bool类型

--------------------------------------------------------------------------------------------------------------------

23，webBrowser 控件（浏览器控件）
url： 里面填写网址即可导航到网址所在地
Url u =new Url(里面填写一个字符串)：将这个字符串转换为Url类型

--------------------------------------------------------------------------------------------------------------------

24，播放音乐  SoundPlayer （需要添加命名空间）
SoundPlayer  sp =  new SoundPlayer()
sp.SoundLocation(里面填写需要播放的路径)

--------------------------------------------------------------------------------------------------------------------

25，打开文件对话框
打开文件对话框：OpenFileDialog         ：Dialo（对话）
OpenFileDialog   of  = new OpenFileDialog();
//设置对话框标题
of.title="填写你所需要添加的标题名字"；
-----
//设置对话框可以多选
of.Multiselect=true;    这样表示可以多选，等于false则表示不可以多选   multi：多
-----
//设置对话框的初始目录
of.InitialDirectory
-----
//设置对话框的文件类型
of.Filter="文本文件|*.txt|媒体文件|*.wav|图片文件|*.jpg|所有文件|*.*" 
*：代表文件名字可以任意
文本文件：显示给用户看的
txt：代表文件类型，这个文件类型可以是任意的，如果想要用户填写的话则可以改为 ：  *.*
-----
//获得打开文件对话框中所打开的文件的路径
of.FileName：选择一个，也就是返回一个路径 
of.FfileNames：选择多个，也就是返回多个路径
都是返回一个字符串
---------------------------------------------
保存文件对话框：SaveFileDialog   
属性设置和打开对话框是一样的
---------------------------------------------
字体对话框：FontFileDialog
fd.font;  ：这个获得的是选择的字体
---------------------------------------------
颜色对话框：ColorFileDialog
-----
这些对话框需要打开的话，需要创建一个对象，然后用这个对象调用   ShowDialog（）方法

--------------------------------------------------------------------------------------------------------------------

26，进程类：process
1)，需要添加命名空间：using System.Diagnostics；
------
//通过process的一个静态方法 GetProcess()   可以访问当前计算机正在运行的进程
//返回一个Process类型的数组
process[]  pc =process.Getprocess();
//如果需要输出遍历即可
-----
//关闭一个进程
pc.Kill()：可以关闭当前进程
//放在前面的遍历中可以关闭全部进程
-----
//通过一个进程打开一个程序
process.Start("里面填写需要打开进程的名字即可")
-----
//通过一个进程打开一个文件
1，定义一个processstartinfor类的对象，括号里面填写需要打开的文件的路径
ProcessStartInFor   psi = new   ProcessStartInFor("里面填写需要打开的文件的路径")
2，定义一个process类的对象
process  pc  =  new process();
3，调用这个类的一个属性
pc.StartInFor=psi;
4，然后打开
pc.Start();

--------------------------------------------------------------------------------------------------------------------

27，多线程：thread        进程和线程的关系：一个进程包含多个线程
添加命名空间：using Syste.Threading；
-----
创建一个线程去执行一个方法
Thread  th = new Thread(里面填写你需要执行的方法)
//这个表示该线程已经准备就绪了，可以随时执行
//线程具体什么时候去执行是由CPU决定的
th.start();
-----
线程分为两种：
1)，前台线程：只有所有的前台线程都关闭才能完成程序的关闭
2)，后台线程：只要所有的前台线程结束，后台线程自动结束
-----
默认创建的线程是前台线程
将一个线程设置为后台线程：th.IsBackground=true;
-----
单线程带来的问题：
1)，让计算机同时做多件事情，节约时间
2)，多线程可以让一个程序同时处理多个事情
3)，后台运行程序，提高程序的运行效率，也不会使主界面出现无响应的情况
4)，获得当前线程和当前进程
-----
产生一个线程的4个步骤：
1.编写产生程序所要执行的方法
2.应用命名空间：using System.Threading；
3.实例化Thread类，并传入一个指向线程所要运行方法的委托。（这时候这个线程已经产生，但是还没有运行）
4.调用Thread实例的Start方法，标记该线程可以被CPU执行了，但具体执行时间由CPU决定
-----
新线程访问主线程会报错：
在.NET平台下，是不允许跨线程访问的
//解决办法：让应用程序不去检查跨线程访问，也就是取消跨线程的访问
control.ChenkForIllegalCrossThreadCalls = false； 
ChenkForIllegalCrossThreadCalls：作用，获取或设置一个值，该值指示是否捕获对错误线程的调用
-----
当我们关闭程序的时候，应该把正在运行的线程关闭
//在关闭事件中判断线程内容是否为Null
//如果新线程的内容不为Null的话，则表示该线程因为某种原因未被关闭
//这个时候我们需要手动给他关闭
if(th!=Null)
{
	th.abort();   ：abort表示终止当前线程
}
//当一个线程被终止：也就是abort时
//就不可以再Start()
-----
Thread的静态方法
//让当前线程停止一段时间之后再运行
Thread.Sleep(里面填写一个时间，以毫秒为计算单位)
-----
Name：可以获得当前线程的名字
Thread.CurrentThread：获得当前的线程引用
-----
当线程去执行带参数的方法的时候：
如果线程执行的方法需要参数，那么要求这个参数必须是object类型
Thread  th =new Thread(方法)
//这个方法必须是object类型的
th.Start("里面可以填写你所需要的参数")
























 